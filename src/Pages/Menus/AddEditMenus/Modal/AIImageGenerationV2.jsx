import axios from "axios";
import React, { useState } from "react";
import toast from "react-hot-toast";

const AiImageGenerationV2 = ({
  selectedImage,
  setSelectedImage,
  itemImage,
  setItemImage,
  setItemName,
}) => {
  const itemName = "Lychee Juice tea. Topping: konjac.";
  const [generatedImage, setGeneratedImage] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchGoogleSearchData = async (query) => {
    try {
      const response = await axios.get(
        `https://www.googleapis.com/customsearch/v1?q=${query}&key=${
          import.meta.env.VITE_GOOGLE_SEARCH_API_KEY
        }&cx=${import.meta.env.VITE_SEARCH_ENGINE_ID}`
      );
      return response.data.items;
    } catch (err) {
      console.error("Error fetching search data:", err);
      return null;
    }
  };

  const createPromptFromSearch = (searchResults, dishName) => {
    const topResult = searchResults?.[0];
    if (topResult) {
      const description = topResult.snippet || topResult.title;
      return `A high-quality photo of a ${dishName} dish, including ingredients like ${description}`;
    }
    return `A dish called ${dishName}`;
  };

  const generateImage = async () => {
    setLoading(true);
    try {
      const searchResults = await fetchGoogleSearchData(itemName);
      const autoPrompt = createPromptFromSearch(searchResults, itemName);

      console.log(autoPrompt, "autoPrompt");

      const response = await axios.post(
        "https://api.openai.com/v1/images/generations",
        {
          prompt: autoPrompt,
          n: 1,
          size: "1024x1024",
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
          },
        }
      );
      const imageUrl = response.data.data;
      setGeneratedImage(imageUrl);
    } catch (err) {
      console.error("Error generating image:", err);
      toast.error("Error generating image");
      setError(err.response?.data?.error?.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-3 bg-gray-200">
      <h1>AI Image Generator</h1>
      <div className="flex items-center justify-center gap-2">
        <input
          className="input input-bordered w-full max-w-xs"
          type="text"
          placeholder="Enter dish name"
          value={itemName}
          onChange={(e) => setItemName(e.target.value)}
        />
        <button className="btn" onClick={generateImage} disabled={loading}>
          {loading ? "Generating..." : "Generate Image"}
        </button>
      </div>
      {loading ? (
        <div>
          <p>Generating your expected image....</p>
        </div>
      ) : (
        generatedImage && (
          <div className="flex items-center justify-center gap-2">
            {generatedImage?.map((image) => (
              <img
                key={image}
                src={image.url}
                alt="Generated by AI"
                className="w-1/2 h-1/2 rounded shadow-lg"
              />
            ))}
          </div>
        )
      )}
      {!generatedImage && error && <p className="text-red-600"> {error}</p>}
    </div>
  );
};

export default AiImageGenerationV2;
